
1..  Union의 쓰임.
	할당된 메모리를 겹쳐쓰는 변수들을 쓰는 것이면 왜 사용하는 것인가?
	union으로 int와 float가 있으면 형변환 없이 그냥 사용 하는식이 가능해지는 건가.

2.  std::filesystem의 기능들을 살펴보자.

3.  GameEngineWindow에서 생성한 Hdc를 GameEngineWindowTexture에 CreateRes로 받아줫는데
	윈도우에 어떠한 그림을 그리는 권한을 받은것이다.

4.  릴리즈란?
	게임엔진엑터는 랜더러를 리스트로 가지고
	게임엔진렌더러는 자신의 주인인 액터(마스터)와 자신이 렌드하게될 이미지인 텍스쳐를 가진다.
	게임엔진카메라 또한 렌더러를 가지는데 엑터가 가진 랜더러리스트를 맵으로 받아서 대신 관리하는것.
	게임엔진레벨은 카메라를 메인카메라, UI카메라로 2개가지고 엑터의 리스트들을 맵으로 관리한다.

5.  카메라의 이동 관리.
	 모든게임이 카메라와 플레이어가 동시에 움직이지 않는다
	  게임마다 게임고유의 카메라 워킹이있고 적합한 카메라 워킹을 어떻게 구사할수있을까
	  1. 플레이어 위치에따른 제어.
		  절대 좌표를 기준으로 플레이어와의 차이를 기준으로 이동한다.
	  2. 횡스크롤 X값만 있는 맵이라는 가정하에 플레이어와 카메라의 X좌표 차이로 구간마다의
	   카메라 워킹을 구현 할수있다.